---
export const prerender = false;
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";
import fs from "node:fs/promises";
import path from "node:path";
import Papa from "papaparse";
import Ayah from "../icons/Ayah.astro";
import {get_partitioned_randomized_arr} from "../scripts/partitioned_randomization.js";


const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  console.debug("Not signed in. Going to sign in");
  return Astro.redirect("/signin");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    Astro.cookies.delete("sb-access-token", {
      path: "/",
    });
    Astro.cookies.delete("sb-refresh-token", {
      path: "/",
    });
    return Astro.redirect("/signin");
  }
} catch (error) {
  Astro.cookies.delete("sb-access-token", {
    path: "/",
  });
  Astro.cookies.delete("sb-refresh-token", {
    path: "/",
  });
  console.debug("Not signed in. Going to sign in page");
  return Astro.redirect("/signin");
}

const email = session.data.user?.email;
let display_name = session.data.user?.user_metadata.display_name;
const user_id = session.data.user?.id;

if(!display_name){
  display_name=email;
}

// Parse both CSV files
const [csv1, csv2] = await Promise.all([
  fs.readFile(path.resolve("public/Ayahs_with_Metadata.csv"), "utf-8"),
  fs.readFile(path.resolve("public/Surahs_Metadata.csv"), "utf-8"),
]);

const { data: ayahs_with_metadata } = Papa.parse(csv1, { header: true });
const { data: surahs_metadata } = Papa.parse(csv2, { header: true });

let { data: user_correct_ayahs } = await supabase.from('tested_ayahs').select('ayah, last_tested, incorrectness').eq('user_id', user_id).lt('incorrectness', 1).order('last_tested', {ascending: true});
let { data: user_incorrect_ayahs } = await supabase.from('tested_ayahs').select('ayah, last_tested, incorrectness').eq('user_id', user_id).gt('incorrectness', 0).order('last_tested', {ascending: true});

let user_incorrect_ayahs_randomized = get_partitioned_randomized_arr(user_incorrect_ayahs);

const correct_ayah_ids = user_correct_ayahs.map(row => row.ayah);
const incorrect_ayah_ids = user_incorrect_ayahs.map(row => row.ayah);
const untested_ayah_ids = Array.from({ length: 6236 }, (_, i) => i).filter(id => !correct_ayah_ids.includes(id) && !incorrect_ayah_ids.includes(id)); // must change when adjustable hifz amount is implemented
const forgotten_ayah_ids = correct_ayah_ids.concat(untested_ayah_ids);
let user_forgotten_ayahs_randomized_ids = get_partitioned_randomized_arr(forgotten_ayah_ids);



---


<Layout>
  <h1>Welcome {display_name}</h1>
  <p>We are happy to see you here</p>
  <form action="/api/auth/signout">
    <button type="submit">Sign out</button>
    
  </form>
  <div id="prompt-div">
    <span id="prompt-span">_</span>
  </div>
  <div id="answer-div">
    <span id="answer-span">_</span>
  </div>
  <button id="reveal-btn">Reveal</button>
  <div>
    <button id="incorrect-btn">Incorrect</button>
    <button id="correct-btn">Correct</button>
  </div>
  
</Layout>

<script define:vars={{user_id, ayahs_with_metadata, surahs_metadata, user_incorrect_ayahs_randomized, user_forgotten_ayahs_randomized_ids, user_correct_ayahs}} type="module">
  //import Papa from 'https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js';
  
  

  let percentage_from_errors = 80;
  let equal_surah_weights = false;

  

  const prompt_span = document.getElementById("prompt-span");
  const answer_span = document.getElementById("answer-span");

  let current_forgotten_idx = 0;
  let current_incorrect_idx = 0;

  let forgotten_size = user_forgotten_ayahs_randomized_ids.length;
  let incorrect_size = user_incorrect_ayahs_randomized.length;

  function onlyUnique(value, index, array) {
    return array.indexOf(value) === index;
  }

  let current_answer_ayah = 0;

  generate_and_display_prompt();

  function get_absolute_ayah_no(ayah, surah){
    return surahs_metadata[surah]["first_ayah"]+ayah-1; // -1 to convert to 0-indexed because relative ayahs are 1-indexed
  }

  function generate_and_display_prompt(){
    answer_span.textContent="_";
    const rand = Math.random() * 100;
    if (rand < percentage_from_errors && incorrect_size>0) {
      display_incorrect_prompt();
    } else {
      display_forgotten_prompt();
    }


    function display_incorrect_prompt(){ // tests ayahs previously answered incorrectly, prioritized by recency (negatively)
      current_answer_ayah = 8;
      display_prompt_of(current_answer_ayah);
      current_incorrect_idx=(current_incorrect_idx+1)%incorrect_size;

    }

    function display_forgotten_prompt(){ // tests all other ayahs, prioritized by recency (negatively)
      current_answer_ayah = 8;
      display_prompt_of(current_answer_ayah);
      current_forgotten_idx=(current_forgotten_idx+1)%forgotten_size;
      
    }

    function display_prompt_of(answer_ayah){
      
      //prompt_span.textContent = prompt_ayah;
      // If ayah is the first in the surah
      if(ayahs_with_metadata[answer_ayah]["ayah_no_surah"]==1){
        // Ask for the first ayah in that surah
        prompt_span.textContent = "First ayah in "+surahs_metadata[ayahs_with_metadata[answer_ayah]["Chapter"]-1]["surah_name_roman"];
      }
      // Else if ayah is preceded by (an) identical ayah(s)
      else if(ayahs_with_metadata[answer_ayah-1]["repeat_sequence_count"]>0){
        let repeat_sequence_count = ayahs_with_metadata[answer_ayah-1]["repeat_sequence_count"];
        // If the num of identical ayahs preceding it is equal to the relative ayah number
        if(repeat_sequence_count==ayahs_with_metadata[answer_ayah-1]["ayah_no_surah"]){
          // Mention the name of the surah
          prompt_span.textContent = ayahs_with_metadata[answer_ayah-1]["ArabicText"]+" (in "+surahs_metadata[ayahs_with_metadata[answer_ayah]["Chapter"]-1]["surah_name_roman"]+")";
        }

        // Else
        else{
          let str="";
          // Keep showing preceding ayahs until you reach a non identical ayah
          for(let j=answer_ayah-repeat_sequence_count-1; j<=answer_ayah-1; j++){
            str = "O"+ayahs_with_metadata[j]["ArabicText"]+ str;
          }
          prompt_span.textContent = str;
        }
      } 
      // Else
      else{
        // Show the prompt ayah (ayah immediately preceding the answer ayah)
        prompt_span.textContent = ayahs_with_metadata[answer_ayah-1]["ArabicText"];
      }
    }

    function reveal_answer(){
      answer_span.textContent = ayahs_with_metadata[current_answer_ayah]["ArabicText"];

    }
    document.getElementById("reveal-btn").addEventListener('click', reveal_answer);

    function correct(){
      update_database_ayah(current_answer_ayah, 0);
      generate_and_display_prompt();
    }
    document.getElementById("correct-btn").addEventListener('click', correct);

    function incorrect(){
      update_database_ayah(current_answer_ayah, 1);
      generate_and_display_prompt();
    }
    document.getElementById("incorrect-btn").addEventListener('click', incorrect);

    /*async function update_database_ayah(ayah, incorrectness){
      const {error} = await supabase.from('tested_ayahs').update({last_tested: new Date().toISOString(), incorrectness: incorrectness}).eq('user_id',user_id).eq('ayah', ayah);
    }*/

    async function update_database_ayah(ayah, incorrectness){
      await fetch('/api/record-answer', {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({ user_id, ayah, incorrectness }),
      });
    }
  }
    
</script>