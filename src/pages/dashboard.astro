---
export const prerender = false;
import Layout from "../layouts/Layout.astro";
import '../styles/global.css';
import { supabase } from "../lib/supabase";
import fs from "node:fs/promises";
import path from "node:path";
import Papa from "papaparse";
import Ayah from "../icons/Ayah.astro";
import {get_partitioned_randomized_arr, shuffle} from "../scripts/partitioned_randomization.js";


const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  console.debug("Not signed in. Going to sign in");
  return Astro.redirect("/signin");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    Astro.cookies.delete("sb-access-token", {
      path: "/",
    });
    Astro.cookies.delete("sb-refresh-token", {
      path: "/",
    });
    return Astro.redirect("/signin");
  }
} catch (error) {
  Astro.cookies.delete("sb-access-token", {
    path: "/",
  });
  Astro.cookies.delete("sb-refresh-token", {
    path: "/",
  });
  console.debug("Not signed in. Going to sign in page");
  return Astro.redirect("/signin");
}

const email = session.data.user?.email;
let display_name = session.data.user?.user_metadata.display_name;
const user_id = session.data.user?.id;

if(!display_name){
  display_name=email;
}

// Parse both CSV files
const [csv1, csv2] = await Promise.all([
  fs.readFile(path.resolve("public/Ayahs_with_Metadata.csv"), "utf-8"),
  fs.readFile(path.resolve("public/Surahs_Metadata.csv"), "utf-8"),
]);

const { data: ayahs_with_metadata } = Papa.parse(csv1, { header: true });
const { data: surahs_metadata } = Papa.parse(csv2, { header: true });

let { data: user_correct_ayahs } = await supabase.from('tested_ayahs').select('ayah, last_tested, incorrectness').eq('user_id', user_id).lt('incorrectness', 1).order('last_tested', {ascending: true});
let { data: user_incorrect_ayahs } = await supabase.from('tested_ayahs').select('ayah, last_tested, incorrectness').eq('user_id', user_id).gt('incorrectness', 0).order('last_tested', {ascending: true});

let user_incorrect_ayahs_randomized = get_partitioned_randomized_arr(user_incorrect_ayahs);

const correct_ayah_ids = user_correct_ayahs.map(row => row.ayah);
const incorrect_ayah_ids = user_incorrect_ayahs.map(row => row.ayah);
let untested_ayah_ids = Array.from({ length: 6236 }, (_, i) => i).filter(id => !correct_ayah_ids.includes(id) && !incorrect_ayah_ids.includes(id)); // must change when adjustable hifz amount is implemented
shuffle(untested_ayah_ids);
const forgotten_ayah_ids = correct_ayah_ids.concat(untested_ayah_ids);
let user_forgotten_ayahs_randomized_ids = get_partitioned_randomized_arr(forgotten_ayah_ids);



---


<Layout>
  <h1>Welcome {display_name}</h1>
  <p>We are happy to see you here</p>
  <form action="/api/auth/signout">
    <button type="submit">Sign out</button>
    
  </form>
  <div id="prompt-and-answer">
    <span id="surah-name-span" style="color: rgb(137, 137, 137);">_</span>
    <div id="prompt-div">
      <span id="prompt-span">_</span>
    </div>
    <div id="answer-div">
      <span id="answer-span">_</span>
    </div>
  </div>
  <button id="reveal-btn" class="active">Reveal</button>
  <div>
    <button id="incorrect-btn" class="inactive"><span>Incorrect</span></button>
    <button id="correct-btn" class="inactive">Correct</button>
  </div>
  
</Layout>

<style>
  .active{
    display:block;
  }

  .inactive{
    display:none;
  }

  #prompt-span, #answer-span{
    font-size: 30px;
    direction: rtl;
    unicode-bidi: bidi-override;
  }

  #surah-name-span{
    color: white;
  }

  #prompt-span{
    color:white;
  }

  #answer-span{
    color:var(--color4);
  }

  #prompt-and-answer{
    position:fixed;
    overflow:scroll;
    background-color: var(--color0);
    height:60%;
    width:100%;
    padding:20px;
  }
  #reveal-btn{
    position:fixed;
    height:20%;
    width:100%;
    bottom:0;
    font-size: 30px;
    background-color: var(--color2);
    color:var(--color3);
    border:none
  }
  #correct-btn, #incorrect-btn{
    width:50%;
    height:20%;
    position:fixed;
    bottom:0;
    font-size: 30px;
  }
  #correct-btn{
    right:0;
    background-color: greenyellow;
    color:green;
  }
  #incorrect-btn{
    left:0;
    background-color: red;
    color:pink;
    overflow: hidden;
  }
  #incorrect-btn::before{
    content: "";
    position: absolute;
    background-color: darkred;
    top: 0;
    left: 0;
    width: 0%;
    height: 100%;
    transition: width 0s;
    z-index: 0;
  }
  #incorrect-btn.filling::before {
    animation: fill-bar 2s linear forwards;
  }

  @keyframes fill-bar {
    from { width: 0%; }
    to { width: 100%; }
  }

  #incorrect-btn span {
    position: relative;
    z-index: 1;
  }
</style>

<script define:vars={{user_id, ayahs_with_metadata, surahs_metadata, user_incorrect_ayahs_randomized, user_forgotten_ayahs_randomized_ids, user_correct_ayahs}} type="module">
  //import Papa from 'https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js';
  
  const LEARNING_INCREMENT = 2;

  let percentage_from_errors = 50;
  let equal_surah_weights = false;

  

  const prompt_span = document.getElementById("prompt-span");
  const answer_span = document.getElementById("answer-span");
  const surah_name_span = document.getElementById("surah-name-span");
  const reveal_btn = document.getElementById("reveal-btn");
  const correct_btn = document.getElementById("correct-btn");
  const incorrect_btn = document.getElementById("incorrect-btn");  

  let current_forgotten_idx = 0;
  let current_incorrect_idx = 0;
  let current_mode = 0; // 0: forgotten, 1: incorrect

  let forgotten_size = user_forgotten_ayahs_randomized_ids.length;
  let incorrect_size = user_incorrect_ayahs_randomized.length;

  let pressStartTime;

  function onlyUnique(value, index, array) {
    return array.indexOf(value) === index;
  }

  let current_answer_ayah = 0;

  generate_and_display_prompt();

  function get_absolute_ayah_no(ayah, surah){
    return surahs_metadata[surah]["first_ayah"]+ayah-1; // -1 to convert to 0-indexed because relative ayahs are 1-indexed
  }

  function generate_and_display_prompt(){
    answer_span.textContent="_";
    surah_name_span.textContent="_";
    const rand = Math.random() * 100;
    if (rand < percentage_from_errors && incorrect_size>0) {
      display_incorrect_prompt();
    } else {
      display_forgotten_prompt();
    }
  }


  function display_incorrect_prompt(){ // tests ayahs previously answered incorrectly, prioritized by recency (negatively)
    current_answer_ayah = user_incorrect_ayahs_randomized[current_incorrect_idx]["ayah"];
    display_prompt_of(current_answer_ayah);
    current_incorrect_idx=(current_incorrect_idx+1)%incorrect_size;
    current_mode = 1;

  }

  function display_forgotten_prompt(){ // tests all other ayahs, prioritized by recency (negatively)
    current_answer_ayah = user_forgotten_ayahs_randomized_ids[current_forgotten_idx];
    display_prompt_of(current_answer_ayah);
    current_forgotten_idx=(current_forgotten_idx+1)%forgotten_size;
    current_mode = 0;
    
  }

  function display_prompt_of(answer_ayah){
    
    //prompt_span.textContent = prompt_ayah;
    // If ayah is the first in the surah
    if(ayahs_with_metadata[answer_ayah]["ayah_no_surah"]==1){
      // Ask for the first ayah in that surah
      prompt_span.textContent = "First ayah in "+surahs_metadata[ayahs_with_metadata[answer_ayah]["Chapter"]-1]["surah_name_roman"];
    }
    // Else if ayah is preceded by (an) identical ayah(s)
    else if(ayahs_with_metadata[answer_ayah-1]["repeat_sequence_count"]>0){
      let repeat_sequence_count = ayahs_with_metadata[answer_ayah-1]["repeat_sequence_count"];
      // If the num of identical ayahs preceding it is equal to the relative ayah number
      if(repeat_sequence_count==ayahs_with_metadata[answer_ayah-1]["ayah_no_surah"]){
        // Mention the name of the surah
        prompt_span.textContent = ayahs_with_metadata[answer_ayah-1]["ArabicText"]+" ۝ "+" (in "+surahs_metadata[ayahs_with_metadata[answer_ayah]["Chapter"]-1]["surah_name_roman"]+")";
      }

      // Else
      else{
        let str="";
        // Keep showing preceding ayahs until you reach a non identical ayah
        for(let j=answer_ayah-repeat_sequence_count-1; j<=answer_ayah-1; j++){
          str = str+ ayahs_with_metadata[j]["ArabicText"]+ " ۝ ";
        }
        prompt_span.textContent = str;
      }
    } 
    // Else
    else{
      // Show the prompt ayah (ayah immediately preceding the answer ayah)
      prompt_span.textContent = ayahs_with_metadata[answer_ayah-1]["ArabicText"]+" ۝ ";
    }
  }

  function reveal_answer(){
    answer_span.textContent = ayahs_with_metadata[current_answer_ayah]["ArabicText"]+" ۝ ";
    surah_name_span.textContent = "[سورة "+surahs_metadata[ayahs_with_metadata[current_answer_ayah]["Chapter"]-1]["surah_name_ar"]+"]";
    reveal_btn.classList.remove("active");
    correct_btn.classList.add("active");
    incorrect_btn.classList.add("active");
    reveal_btn.classList.add("inactive");
    correct_btn.classList.remove("inactive");
    incorrect_btn.classList.remove("inactive");
  }
  reveal_btn.addEventListener('click', reveal_answer);

  function correct(){
    if(current_mode==0){// Forgotten mode
      update_database_ayah(current_answer_ayah, 0);
    }
    else{ // Incorrect mode
      let incorrectness_amount = user_incorrect_ayahs_randomized[current_incorrect_idx]["incorrectness"];
      if(incorrectness_amount<0){incorrectness_amount=0;}
      update_database_ayah(current_answer_ayah, incorrectness_amount-LEARNING_INCREMENT);
    }
    generate_and_display_prompt();
    reveal_btn.classList.add("active");
    correct_btn.classList.remove("active");
    incorrect_btn.classList.remove("active");
    reveal_btn.classList.remove("inactive");
    correct_btn.classList.add("inactive");
    incorrect_btn.classList.add("inactive")
  }
  correct_btn.addEventListener('click', correct);

  function incorrect(){
    incorrect_btn.classList.remove('filling');
    let incorrectness_amount = Math.floor((performance.now() - pressStartTime)/100);
    // Upper limit
    if(incorrectness_amount<1){
      incorrectness_amount=1;
    }
    // Lower limit
    else if(incorrectness_amount>20){
      incorrectness_amount=20;
    }
    console.log(`Button pressed for ${incorrectness_amount*100} milliseconds.`);
    update_database_ayah(current_answer_ayah, incorrectness_amount);
    generate_and_display_prompt();
    reveal_btn.classList.add("active");
    correct_btn.classList.remove("active");
    incorrect_btn.classList.remove("active");
    reveal_btn.classList.remove("inactive");
    correct_btn.classList.add("inactive");
    incorrect_btn.classList.add("inactive")
  }
  incorrect_btn.addEventListener('mousedown', () => {
    pressStartTime = performance.now();
    incorrect_btn.classList.add('filling');
  });
  incorrect_btn.addEventListener('touchstart', () => {
    pressStartTime = performance.now();
    incorrect_btn.classList.add('filling');
  });
  incorrect_btn.addEventListener('mouseup', incorrect);
  incorrect_btn.addEventListener('touchend', incorrect);

  /*async function update_database_ayah(ayah, incorrectness){
    const {error} = await supabase.from('tested_ayahs').update({last_tested: new Date().toISOString(), incorrectness: incorrectness}).eq('user_id',user_id).eq('ayah', ayah);
  }*/

  async function update_database_ayah(ayah, incorrectness){
    await fetch('/api/record-answer', {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({ user_id, ayah, incorrectness }),
    });
  }
    
</script>